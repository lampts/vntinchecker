{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Vietnam Tax Identifier Number validator vntinchecker \u00b6 This is simple project that helps you to validate the vietnam tax numbers. Base example \u00b6 Given the tax identifer number string, we can check the validity from vntin.common import validate_tin validate_tin ( \"0305418909\" ) # must be 1 - mean valid Documentation \u00b6 We have got a simple documentation page here. Features \u00b6 no dependencies support Python 3.6+ version MIT license Installation \u00b6 You can install this package via pip pip install vietnam - tin - checker It may be safer however to install via; python - m pip install vietnam - tin - checker Contributing \u00b6 Make sure you check out the issue list beforehand in order to prevent double work before you make a pull request. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:lampts/vntinchecker.git cd vntinchecker make install-dev","title":"Index"},{"location":"index.html#vietnam-tax-identifier-number-validator-vntinchecker","text":"This is simple project that helps you to validate the vietnam tax numbers.","title":"Vietnam Tax Identifier Number validator vntinchecker"},{"location":"index.html#base-example","text":"Given the tax identifer number string, we can check the validity from vntin.common import validate_tin validate_tin ( \"0305418909\" ) # must be 1 - mean valid","title":"Base example"},{"location":"index.html#documentation","text":"We have got a simple documentation page here.","title":"Documentation"},{"location":"index.html#features","text":"no dependencies support Python 3.6+ version MIT license","title":"Features"},{"location":"index.html#installation","text":"You can install this package via pip pip install vietnam - tin - checker It may be safer however to install via; python - m pip install vietnam - tin - checker","title":"Installation"},{"location":"index.html#contributing","text":"Make sure you check out the issue list beforehand in order to prevent double work before you make a pull request. To get started locally, you can clone the repo and quickly get started using the Makefile . git clone git@github.com:lampts/vntinchecker.git cd vntinchecker make install-dev","title":"Contributing"},{"location":"api/vntin.html","text":"Vntin \u00b6 validate_tin ( tin ) \u00b6 Show source code in vntin/common.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def validate_tin ( tin : str ) -> int : \"\"\" tin format: `n1n2n3n4n5n6n7n8n9 n10 n11n12n13`. `n10` is checksum returns `1` if valid else `0` \"\"\" if not isinstance ( tin , str ): raise ValueError ( \"The input of tax identifier number needs to be a string.\" ) if not tin . isdigit (): raise ValueError ( \"The input of tax identifier number needs to be digits\" ) if len ( tin ) < 10 : raise ValueError ( \"Tax Identifier Number must have more 10 digits.\" ) codes = tin [: 10 ] weights = [ 31 , 29 , 23 , 19 , 17 , 13 , 7 , 5 , 3 ] checksum = 0 for l1 , l2 in zip ( codes [: 9 ], weights ): checksum += int ( l1 ) * int ( l2 ) if int ( codes [ 9 ]) == ( 10 - checksum % 11 ): return 1 else : return 0 tin format: n1n2n3n4n5n6n7n8n9 n10 n11n12n13 . n10 is checksum returns 1 if valid else 0","title":"vietnam tax id checker"},{"location":"api/vntin.html#vntin","text":"","title":"Vntin"},{"location":"api/vntin.html#vntin.common.validate_tin","text":"Show source code in vntin/common.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 def validate_tin ( tin : str ) -> int : \"\"\" tin format: `n1n2n3n4n5n6n7n8n9 n10 n11n12n13`. `n10` is checksum returns `1` if valid else `0` \"\"\" if not isinstance ( tin , str ): raise ValueError ( \"The input of tax identifier number needs to be a string.\" ) if not tin . isdigit (): raise ValueError ( \"The input of tax identifier number needs to be digits\" ) if len ( tin ) < 10 : raise ValueError ( \"Tax Identifier Number must have more 10 digits.\" ) codes = tin [: 10 ] weights = [ 31 , 29 , 23 , 19 , 17 , 13 , 7 , 5 , 3 ] checksum = 0 for l1 , l2 in zip ( codes [: 9 ], weights ): checksum += int ( l1 ) * int ( l2 ) if int ( codes [ 9 ]) == ( 10 - checksum % 11 ): return 1 else : return 0 tin format: n1n2n3n4n5n6n7n8n9 n10 n11n12n13 . n10 is checksum returns 1 if valid else 0","title":"validate_tin()"}]}